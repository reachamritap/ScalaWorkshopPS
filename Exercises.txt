//Day1
//Ex Val,var,list
val list: List[AnyVal] = List(
   898,
 'd',
  true,
  )
list.foreach(element => println(element))
var z:Unit=()

println(z)

//Ex Classes
//Ex-1
class SI(val principal: Float, val Rate: Float)
{ def calculateSimpleInterest = principal*Rate/100}
new SI(5000,5).calculateSimpleInterest

//Ex-3-apply
class sendMesg(mesg: String)
{def apply(in: String): String= in + mesg}
val mesg1 = new sendMesg("Hello")
mesg1("HRU")

//ex-4 single object
object HW
{  def helloWorld(message: String): Unit = println(s"Mesg: $message")}
 HW.helloWorld("Hi")

//ex-1 functions
def areaCircle(radius: Int): Float ={
  var area=22/7*radius*radius
  area
}

println(areaCircle(2))

//ex-2

def areaCircle1(Circum: Double): Double={
  var radius:Double=Circum*7.0/44.0
  println(radius)
 def areaCircle_new(radius1:Double)=22.0/7.0*radius1*radius1
  var area1=areaCircle_new(radius)
  println(area1)
  area1
}
println(areaCircle1(34.0))

//ex-3
def addition(x:Int*): Int={
  var Result=0
  for (i<-x) Result+=i
  Result
}

addition(43,54,12)

def xorable(x:Int*): Int={
  var Result=1
  for (i<-x) Result^=i
  Result
}

xorable(1,0,0)

//ex-4
(incrementer: Int)=>incrementer+1
(squared: Int)=>squared^2

/*def multiplier(x:Int,number:Int=>Int): Int{
var prod= x * ((increm: Int)=>increm+1)
}*/

 //Write a function called multiplier that takes two parameters, first as Int, andother of Function type(Int)=>Int. This multiplies the Int value with result ofthe function.Create 2 anonymous functions incremeter( which //increments its value by1) and squared(which gives square of number). Now the problem will behow we can input another Integer for the function multiplier. The returntype of multiplier has not been provided. So try to //create your own way.
//Ex:5
val increm = (n:Int) => n+1
val squared = (n:Int) => n*n
def multiplier(a:Int, g:Int => Int) (x:Int) = {
  a * g(x)
}

println(multiplier(6,increm)(2))

println(multiplier(6,squared)(4))


//Day 2
//Expressions
//Ex1
1+2
//Ex2
val y=54

//Ex3
val square={
  val x=10
  x*x
}

//Ex4
val eve_odd=if(41%2==0) "Is an even no." else "Is an odd no."

//Ex5
val y=28;
val odd_eve_match=y%2==0 match {
  case true=>"even"
  case false=>"odd"

}

//Ex6
var i=0;
for (i <-1 to 6){
  println("No. is "+i);
}

//Ex7
var j=1;
  while(j<6){
    println("This No. is "+j)
    j=j+1
  }

//Ex8

var id =1;

var result = for{ id <- 1 to 5

                  }yield id
for (id<-result){
  println("New no. is "+id);
}

//Currying Exercises
//Ex-1
def squared(x:Int): Int={
  var sqr=x*x
  sqr
}
squared(2)
def cube(y:Int): Int={
  var cube=y*y*y
  cube
}
cube(2)

def sum(squared:Int=>Int,cube:Int=>Int,num:Int) = {
  var sum=squared(num)+cube(num)
  sum
}
sum(squared,cube,3)

//Ex-2
def currInterest(p:Int)(t:Int)(r:Int): Int=p*t*r/100

currInterest(2000)(2)(5)

//Tail Recursion
//Ex1-factorial
def tailFact(n:Int, fact_n:Int=1): BigInt={
  if (n <= 1) 1
  else n * tailFact(n - 1)
}

println(tailFact(6))

//Ex-2-fibonacci series

def fibonacci(n: Int): Int = {
  if (n <=1) return n
  else return (fibonacci(n - 1) + fibonacci(n - 2))
}
/*val fib_num=10
if (fib_num<=0)
  println("Please enter a positive no.")
else {*/
  for (i <- List.range(1,10))
    yield {println(fibonacci(i))
}

//Day-3 

//Traits Ex:1
abstract class Trouser {
  def color: String = "Purple"
  def describe: String = s"$color"
  override def toString = s"$describe trouser"
}

trait Size extends Trouser {
  var size:Char = 'L'
  override def describe:String=s"size $size ${super.describe}"
}

val size1=new Size {
  override def color = "Green"
}

size1.describe

trait Style extends Trouser {
  def style:String = "Red"
  //override def describe: String = s"Styled ${super.color} trouser"
  override def describe: String = s"Styled $style trouser"
}
val style1=new Style {
  override def color = "Red"
}

style1.describe

//Traits EX-2

trait BellBottom extends Style {
  override def style:String = "Bell Bottom"
  override def describe: String = s"$style Styled ${super.color } trouser"
}

val BellBottom1=new BellBottom {

}

BellBottom1.describe

trait MidRiseWaist extends Style {
  override def style:String = "Mid Rise"
  override def describe: String = s"$style Styled $color trouser"
}

val MidRiseWaist1=new MidRiseWaist {

}

MidRiseWaist1.describe
//Traits Ex3
class StylishTrouser(val size:String, override val style:String, override val color:String) extends Trouser with BellBottom with MidRiseWaist {
override def describe: String = super.describe
  override def toString = s"size $size $style styled $color trouser"
}

val stylishTrouser1=new StylishTrouser("S","BellBottom", "Orange")

//stylishTrouser1.describe
stylishTrouser1.toString
//Ex,Enumerators
object Days extends Enumeration {
    type Day = Value
    val Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday = Value
// val Monday = Value(7, "Mon")
  }

  println(Days.Friday)

  import Days._

def isWorkingDay1(d: Day) = ! (d == Saturday || d == Sunday)

def isWorkingDay2() =
    Days.values.toList.filter(Day => Day >= Monday && Day <= Friday)

println(isWorkingDay1(Monday))

println(isWorkingDay2())

//Day 5
//Options
//Ex-1

val names = Map("Amrita"->"1", "Kelly"->"2", "Darbie"->"3","Haena"->"4")

def show(x: Option[String]) = x match {
  case Some(s) => s
  case None => "Unknown User"
}

println("Hello"+show(names.get("Amrita")))

show(names get "Jade")
//-------------------------------
val mappedName = Map("Amrita" -> "1","John" ->2,"Sagar" -> "9")
def greet(name: String) {
  mappedName.get(name) match {
    case Some(_) => println("Hello " +name)
    case None => println("Hello, Who are you ?")
  }
}

greet("Amrita")

greet("Kelly")

//For 5 users-----------
/*val users=List("a","b","c")
def greet1(name: String) {
  users.contains(name) match {
    case Some(_) => println("Hello " +name)
    case None => println("Hello, Who are you ?")
  }
}
users.contains("Amrita")*/

//def findName(key: Int): Option[names]
//Either
//Ex-1
def divideXByY(x: Int, y: Int): Either[String, Int] = {
  if (y == 0) Left("oops, can't divide by 0")
  else Right(x / y)
}

divideXByY(4,2)

//Ex-2
def isAllowedToVote(age:Int): Either[String,Unit] = {
  if (age<18) Left("Not allowed for driving")
  else Right()
}
isAllowedToVote(12)
isAllowedToVote(27)

//Pattern
//Ex-1
def eligibilityTest(age: Int): String = age match {
  case age if age>=18 => "Eligible"
  case _ => "not eligible"
}
eligibilityTest(24)
eligibilityTest(17)

//EX-2
def matchTest(num1: Int, num2: Int,sym: Symbol): Int = sym match {
  case Symbol(sym) => num1 + num2
  //case 2 => "two"
  case _ => 0
}

matchTest(1,2,Symbol("a"))
//----------------------------------------
def matchTest1(num1: Int, num2: Int,sym: Char): Int = sym match {
  case '+' => num1 + num2
  case '-' => num1 - num2
  case '*' => num1*num2
  case '/' => num1/num2
  case _ => 0
}

matchTest1(10,2,'+')

//Ex-3
abstract class Preference
case class Cricket(player: String) extends Preference
case class Hockey(player: String) extends Preference

def preference(sport: Preference): String= {
  sport match {
    case Cricket(player) => s"$player likes Cricket"
    case Hockey(player) => s"$player likes Hockey"
  }
}
val sport1= Cricket("Dhoni")
val sport2= Hockey("Lakra")

println(preference(sport1))
println(preference(sport2))



